import{_ as n,o as a,c as s,a as e}from"./app-vL25MzAY.js";const t={},o=e(`<h2 id="常用配置" tabindex="-1"><a class="header-anchor" href="#常用配置" aria-hidden="true">#</a> 常用配置</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>tinymce<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
          <span class="token literal-property property">selector</span><span class="token operator">:</span> <span class="token string">&#39;#tinymceEdit&#39;</span><span class="token punctuation">,</span>
          <span class="token literal-property property">language</span><span class="token operator">:</span> <span class="token string">&#39;zh-Hans&#39;</span><span class="token punctuation">,</span>
          <span class="token literal-property property">auto_focus</span><span class="token operator">:</span> <span class="token string">&#39;tinymceEdit&#39;</span><span class="token punctuation">,</span>
          <span class="token literal-property property">plugins</span><span class="token operator">:</span>
            <span class="token string">&#39;advlist autolink autoresize autosave charmap code directionality emoticons fullscreen image insertdatetime link lists media nonbreaking pagebreak preview save searchreplace table template visualblocks wordcount&#39;</span><span class="token punctuation">,</span>
          <span class="token literal-property property">toolbar</span><span class="token operator">:</span> <span class="token string">&#39;link code&#39;</span><span class="token punctuation">,</span>
          <span class="token function-variable function">setup</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">editor</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token comment">// 编辑器实例被渲染之前执行</span>
            <span class="token comment">// editor 当前编辑器引用</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token function-variable function">init_instance_callback</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">editor</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token comment">//  编辑器实例被渲染之后执行</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="常用api" tabindex="-1"><a class="header-anchor" href="#常用api" aria-hidden="true">#</a> 常用API</h2><h3 id="dom操作" tabindex="-1"><a class="header-anchor" href="#dom操作" aria-hidden="true">#</a> DOM操作</h3><p>editor.getBody()</p><blockquote><p>返回可编辑区域的根元素。对于一个非内联的基于iframe的编辑器，返回iframe的主体元素</p></blockquote><p>editor.dom.create(name, attrs, html)</p><blockquote><p>创建一个html元素<br> name: 元素名称<br> attrs: 属性<br> html: 可选的HTML字符串，设置为元素的内部HTML。<br> return 返回创建的内容</p></blockquote><p>editor.dom.createRng()</p><blockquote><p>创建一个新的DOM范围对象。这将使用本地DOM范围API，如果它是可用的。如果没有，它将返回到自定义的TinyMCE实现。</p></blockquote><p>editor.addCommand()</p><blockquote><p>在编辑器中添加一个自定义命令。这个函数也可以用来覆盖现有的命令。你添加的命令可以用execCommand执行。<br> addCommand(name: String, callback: Function, scope: Object)</p></blockquote><p>editor.execCommand()</p><blockquote><p>执行编辑器指令或者自定义指令<br> execCommand(cmd: String, ui: Boolean, value: Object | Array | String | Number | Boolean, args: Object): Boolean</p></blockquote>`,14),p=[o];function c(i,r){return a(),s("div",null,p)}const u=n(t,[["render",c],["__file","introduce.html.vue"]]);export{u as default};
