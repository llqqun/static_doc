import{_ as a,o as e,c as r,a as i}from"./app-7ZQ6jRti.js";const h="/images/parseHtml.png",d={},s=i('<h1 id="浏览器渲染原理" tabindex="-1"><a class="header-anchor" href="#浏览器渲染原理" aria-hidden="true">#</a> 浏览器渲染原理</h1><p>浏览器地址栏输入网址,运行<code>网络线程</code>获取服务端的HTML文档,生成一个渲染任务,添加进任务队列<br> 在事件循环机制下,渲染主线程执行任务队列中的渲染任务,开始渲染流程.</p><p>渲染流程:</p><ol><li>解析HTML文档</li><li>样式计算</li><li>布局</li><li>分层</li><li>绘制</li><li>分块</li><li>光栅化</li><li>画</li></ol><h2 id="解析html" tabindex="-1"><a class="header-anchor" href="#解析html" aria-hidden="true">#</a> 解析HTML</h2><p>为了提高解析效率,开始解析前会启动一个预解析线程,率先下载外部css和js<br> 当解析到link元素时,若外部css未下载解析完成,主线程不会等待,而是继续后续解析<br> 原因是外部css下载和解析工作在预解析线程中执行,这就是CSS不会阻塞HTML解析根本原因<br> 然而当解析到script标签时,正常情况(非正常情况:async,defer)下会停止解析HTML<br> 等待JS下载完成,并将全局代码执行完成,再继续解析HTML<br> (原因:js代码执行过程可能回修改DOM树,所以生成DOM过程必须暂停)</p><p><img src="'+h+'" alt="img"></p><p>第一步解析完成: 得到DOM树和CSSOM 树</p><h2 id="css样式计算" tabindex="-1"><a class="header-anchor" href="#css样式计算" aria-hidden="true">#</a> CSS样式计算</h2><p>遍历DOM树,通过样式计算得到一个带有计算样式的DOM树</p><h2 id="布局" tabindex="-1"><a class="header-anchor" href="#布局" aria-hidden="true">#</a> 布局</h2><p>根据DOM样式,计算出各个节点的大小,位置,生成一个Layout树<br> Layout树和DOM树节点不一定一一对应</p><h2 id="分层" tabindex="-1"><a class="header-anchor" href="#分层" aria-hidden="true">#</a> 分层</h2><p>浏览器获取布局树,经过策略优化进行分层<br> 分层可以使浏览器的效率得到提升,当某一层改变时,不用去重新绘制整个页面,只用绘制单层就好了 通过css 属性 will-change: 属性; 让浏览器风层</p><h2 id="绘制" tabindex="-1"><a class="header-anchor" href="#绘制" aria-hidden="true">#</a> 绘制</h2><p>主线程为分层的每一层生成绘制指令, 渲染主线程工作完成,剩余工作交给合成线程</p><h2 id="分块" tabindex="-1"><a class="header-anchor" href="#分块" aria-hidden="true">#</a> 分块</h2><p>合成线程将对每个图层进行分块,将其划分成很多小区域</p><h2 id="光栅化" tabindex="-1"><a class="header-anchor" href="#光栅化" aria-hidden="true">#</a> 光栅化</h2><p>合成线程将块信息交给GPU进程,以极高的速度完成光栅化,生成一块块的位图</p><h2 id="画" tabindex="-1"><a class="header-anchor" href="#画" aria-hidden="true">#</a> 画</h2><p>合成线程拿到位图后,生成一个个指引信息<br> 然后将指引信息提交给GPU进程,由GPU进程进行调用,提交GPU硬件,完成最终屏幕成像</p>',22),c=[s];function n(t,l){return e(),r("div",null,c)}const p=a(d,[["render",n],["__file","browserRender.html.vue"]]);export{p as default};
