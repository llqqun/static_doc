import{_ as n,o as s,c as a,a as e}from"./app-vL25MzAY.js";const t={},p=e(`<h1 id="dom-操作" tabindex="-1"><a class="header-anchor" href="#dom-操作" aria-hidden="true">#</a> DOM 操作</h1><h2 id="node-api" tabindex="-1"><a class="header-anchor" href="#node-api" aria-hidden="true">#</a> Node API</h2><h3 id="node-insertbefore" tabindex="-1"><a class="header-anchor" href="#node-insertbefore" aria-hidden="true">#</a> Node.insertBefore()</h3><blockquote><p>在指定父节点内的参考节点前插入子节点(意思就是在指定节点前插入一个节点)<br> 如果给定的子节点是对文档中现有节点的引用，insertBefore() 会将其从当前位置移动到新位置(意思就是给节点移动位置)</p></blockquote><p>var insertedNode = parentNode.insertBefore(newNode, referenceNode);</p><ul><li>insertedNode 被插入节点 (newNode)</li><li>parentNode 新插入节点的父节点</li><li>newNode 用于插入的节点</li><li>referenceNode newNode 将要插在这个节点之前</li></ul><h3 id="text-splittext-offset" tabindex="-1"><a class="header-anchor" href="#text-splittext-offset" aria-hidden="true">#</a> Text.splitText(offset)</h3><blockquote><p>根据偏移位置对Text节点进行切割<br> 分割后的文本节点还可以使用Node.normalize方法来合并<br> offset文本节点的索引,从1开始计数</p></blockquote><h3 id="getboundingclientrect-获取元素相对窗口的位置信息及元素本身宽高" tabindex="-1"><a class="header-anchor" href="#getboundingclientrect-获取元素相对窗口的位置信息及元素本身宽高" aria-hidden="true">#</a> getBoundingClientRect() 获取元素相对窗口的位置信息及元素本身宽高</h3><p>Element.getBoundingClientRect() 方法返回一个 DOMRect 对象，其提供了元素的大小及其相对于视口的位置。</p><h3 id="控制用户选择行为-selectstart-事件" tabindex="-1"><a class="header-anchor" href="#控制用户选择行为-selectstart-事件" aria-hidden="true">#</a> 控制用户选择行为--selectstart 事件</h3><p>控制用户选择文本的行为</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 禁止用户选择页面内的任一内容</span>
document<span class="token punctuation">.</span><span class="token function-variable function">onselectstart</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>srcElement<span class="token punctuation">.</span>type <span class="token operator">!=</span> <span class="token string">&quot;text&quot;</span> <span class="token operator">&amp;&amp;</span> event<span class="token punctuation">.</span>srcElement<span class="token punctuation">.</span>type <span class="token operator">!=</span> <span class="token string">&quot;textarea&quot;</span> <span class="token operator">&amp;&amp;</span> event<span class="token punctuation">.</span>srcElement<span class="token punctuation">.</span>type <span class="token operator">!=</span> <span class="token string">&quot;password&quot;</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
	<span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="元素滚动操作" tabindex="-1"><a class="header-anchor" href="#元素滚动操作" aria-hidden="true">#</a> 元素滚动操作</h2><h3 id="api-ele-scrollintoview" tabindex="-1"><a class="header-anchor" href="#api-ele-scrollintoview" aria-hidden="true">#</a> API: ele.scrollIntoView()</h3><p>滚动元素的父容器，使被调用 scrollIntoView() 的元素对用户可见。</p><h3 id="监听指定元素的高度变化-触发滚动" tabindex="-1"><a class="header-anchor" href="#监听指定元素的高度变化-触发滚动" aria-hidden="true">#</a> 监听指定元素的高度变化,触发滚动</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">elementHeightChangeScrollEnd</span> <span class="token punctuation">(</span><span class="token parameter">ele<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> ele <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ele <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> ele <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> domProp <span class="token operator">=</span> ele<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>name
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>domProp<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;Element&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;参数错误:请传入一个Element对象&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">attributes</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">childList</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">subtree</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>
  <span class="token keyword">const</span> fun <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> callback <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span>
    <span class="token operator">?</span> <span class="token function-variable function">callback</span>
    <span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">scrollIntoView</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">behavior</span><span class="token operator">:</span> <span class="token string">&#39;smooth&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">block</span><span class="token operator">:</span> <span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">inline</span><span class="token operator">:</span> <span class="token string">&#39;nearest&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token keyword">const</span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MutationObserver</span><span class="token punctuation">(</span>fun<span class="token punctuation">)</span>
  observer<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> config<span class="token punctuation">)</span>
  <span class="token keyword">return</span> observer
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="监听元素的变化-mutationobserver-api" tabindex="-1"><a class="header-anchor" href="#监听元素的变化-mutationobserver-api" aria-hidden="true">#</a> 监听元素的变化 MutationObserver API</h2><p>MutationObserver 是一个可以观察DOM树变化的接口，它可以监听到DOM节点的添加或删除、属性的变化等。</p><p>使用步骤如下：</p><ul><li>创建一个新的 MutationObserver 实例。</li><li>定义一个回调函数，当被观察的节点发生变化时调用此函数。</li><li>使用 observe 方法指定要观察的目标节点以及观察的配置选项。</li><li>当不再需要观察时，调用 disconnect 方法停止观察。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 创建一个回调函数</span>
<span class="token keyword">const</span> <span class="token function-variable function">callback</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">mutationsList<span class="token punctuation">,</span> observer</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 遍历所有mutation记录</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> mutation <span class="token keyword">of</span> mutationsList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>mutation<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;childList&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;A child node has been added or removed.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>mutation<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;attributes&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;The &#39;</span> <span class="token operator">+</span> mutation<span class="token punctuation">.</span>attributeName <span class="token operator">+</span> <span class="token string">&#39; attribute was modified.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 创建一个observer实例并传入回调函数</span>
<span class="token keyword">const</span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MutationObserver</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 选择需要观察变动的DOM节点目标</span>
<span class="token keyword">const</span> targetNode <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;some-id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 设置observer的配置（传递给observe方法）</span>
<span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">attributes</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">childList</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">subtree</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 开始观察目标节点</span>
observer<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>targetNode<span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 不再需要观察的时候停止观察</span>
observer<span class="token punctuation">.</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,23),o=[p];function c(l,i){return s(),a("div",null,o)}const u=n(t,[["render",c],["__file","dom.html.vue"]]);export{u as default};
